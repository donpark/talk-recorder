{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","utils.js","TalkRecorder.js","recorder.js"],"names":["promiseCallback","promise","cb","then","result","catch","err","triggerEvent","eventTarget","eventName","eventDetail","dispatchEvent","CustomEvent","detail","friendlyFloat","value","oldValue","lastChar","trim","substr","floatValue","parseFloat","getChannelData","audioBuffer","channel","channelData","Float32Array","length","copyFromChannel","slice","AudioContext","window","webkitAudioContext","OfflineAudioContext","webkitOfflineAudioContext","workerUrl","document","currentScript","src","scriptUrl","URL","baseURI","toString","scriptBaseUrl","lastIndexOf","console","log","TalkRecorder","name","newValue","bitRate","navigator","mediaDevices","getUserMedia","MediaRecorder","Worker","WebAssembly","options","isSupported","Error","stream","Object","assign","type","timeslice","getUserMediaOptions","audio","video","channelCount","autoGainControl","echoCancellation","noiseSuppression","addEventListener","e","getTracks","forEach","track","stop","once","_recordOpus","blob","_recordMP3","error","reason","audioBlob","sampleRate","inputSampleRate","arrayBufferFromBlob","audioData","decodeAudioData","inputPCM","withWorker","worker","CHUNK_SIZE","postMessage","offset","remain","chunk","set","data","buffer","mediaRecorderOptions","mimeType","audioBitsPerSecond","recorder","state","Promise","resolve","reject","blobs","ondataavailable","size","push","onstop","Blob","onerror","start","getAudioTracks","getSettings","_processStream","samples","processor","audioContext","sourceNode","createMediaStreamSource","processorNode","createScriptProcessor","onaudioprocess","inputBuffer","connect","destination","disconnect","HTMLElement","reader","FileReader","readAsArrayBuffer","onload","audioCtx","workHandler","onmessage","msg","terminate","customElements","define"],"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","file":"talk-recorder.js","sourceRoot":"../src","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/**\n * Turns a promise into callback.\n * \n * @param {Promise} promise \n * @param {function} cb \n */\nexport function promiseCallback(promise, cb) {\n    return promise.then(result => cb(null, result)).catch(err => cb(err, result));\n}\n\n/**\n * Helper for dispatching a custom event.\n * Default EventInit values are implicitly used, meaning events cannot be captured nor bubbled.\n * \n * @param {EventTarget} eventTarget \n * @param {string} eventName \n * @param {any} eventDetail \n */\nexport function triggerEvent(eventTarget, eventName, eventDetail = null) {\n    eventTarget.dispatchEvent(new CustomEvent(eventName, { detail: eventDetail }));\n}\n\nexport function friendlyFloat(value, oldValue) {\n    if (typeof value !== 'string') {\n        return oldValue;\n    }\n    const lastChar = value.trim().substr(-1);\n    let floatValue = parseFloat(value);\n    if (lastChar === 'k' || lastChar === 'K') {\n        floatValue *= 1000;\n    }\n    return floatValue;\n}\n\n/**\n * Get 'Transferable' raw audio samples from AudioBuffer.\n * This is a convenience function to pave over lack of ubiquitous copyFromChannel support.\n * \n * @param {AudioBuffer} audioBuffer \n * @param {number} channel \n */\nexport function getChannelData(audioBuffer, channel) {\n    let channelData;\n    if ('copyFromChannel' in audioBuffer) {\n        channelData = new Float32Array(audioBuffer.length);\n        audioBuffer.copyFromChannel(channelData, channel);\n    } else {\n        channelData = audioBuffer.getChannelData(channel).slice();\n    }\n    return channelData;\n}","import { getChannelData, friendlyFloat, triggerEvent } from \"./utils\";\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst OfflineAudioContext = window.OfflineAudioContext || window.webkitOfflineAudioContext;\n\n// HACK: determine default worker URL using script tag's src attribute if available.\nlet workerUrl = \"./lamemp3/worker.js\";\nif (document.currentScript && document.currentScript.src) {\n    const scriptUrl = new URL(document.currentScript.src, document.baseURI).toString();\n    const scriptBaseUrl = scriptUrl.substr(0, scriptUrl.lastIndexOf('/'));\n    workerUrl = `${scriptBaseUrl}/lamemp3/worker.js`;\n}\nconsole.log('default workerUrl', workerUrl);\n\n\nexport class TalkRecorder extends HTMLElement {\n    // Lowercased names of modifiable attributes to receive attributeChangedCallback on.\n    static observedAttributes = [\"bitrate\"];\n\n    constructor() {\n        super();\n\n    }\n\n    // Callback used to notify when an attribute in `observedAttributes` list changes value.\n    // Also called before connectedCallback with each attribute's initial value.\n    // Attributes covered include custom as well as built-in attributes, like style.\n    // NOTE: attribute name will be in lowercase as specfied in the HTML spec.\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === 'bitrate') {\n            this.bitRate = friendlyFloat(newValue, oldValue);\n        }\n    }\n\n    // Callback to notify custom element has been inserted into document.\n    connectedCallback() {\n    }\n\n    // Callback to notify custom element has been removed from document.\n    disconnectedCallback() {\n    }\n\n    // Callback to notify custom element's parentNode changes\n    adoptedCallback() {\n    }\n\n    isSupported() {\n        return (\n            navigator.mediaDevices && navigator.mediaDevices.getUserMedia &&\n            window.MediaRecorder &&\n            window.Worker &&\n            window.WebAssembly\n        );\n    }\n\n    async record(options = {}) {\n        if (!this.isSupported()) {\n            throw new Error('This browser does not support media recording');\n        }\n        if (this.stream) {\n            throw new Error('already recording');\n        }\n\n        triggerEvent(this, 'record');\n\n        options = Object.assign({}, {\n            type: 'opus',\n            timeslice: 20,\n            workerUrl,\n        }, options);\n\n        // Use optional 'getUserMedia' field of recording call options to override.\n        const getUserMediaOptions = Object.assign({}, {\n            audio: true,\n            video: false,\n            channelCount: 1,\n            autoGainControl: true,\n            echoCancellation: true,\n            noiseSuppression: true\n        }, options.getUserMedia);\n\n\n        // start capturing audio\n        this.stream = await navigator.mediaDevices.getUserMedia(getUserMediaOptions);\n        this.addEventListener('stop', e => {\n            this.stream.getTracks().forEach(track => track.stop());\n            this.stream = null;\n        }, { once: true });\n\n        triggerEvent(this, 'stream', { stream: this.stream });\n\n        try {\n            let blob;\n            if (options.type === 'opus') {\n                blob = await this._recordOpus(this.stream, options);\n            } else if (options.type === 'mp3') {\n                blob = await this._recordMP3(this.stream, options);\n            }\n            triggerEvent(this, 'recorded', { blob });\n            return blob;\n        } catch (err) {\n            triggerEvent(this, 'error', { error: err });\n            throw err;\n        }\n    }\n\n    async stop(reason = 'finish') {\n        triggerEvent(this, 'stop', { reason });\n    }\n\n    async convert(audioBlob, options = {}) {\n\n        triggerEvent(this, 'convert');\n\n        options = Object.assign({}, {\n            sampleRate: 48000,\n            type: 'mp3',\n            workerUrl,\n        }, options);\n\n        // decode audio samples using 48000 as default input sample rate.\n        const inputSampleRate = options.sampleRate || 48000;\n        const audioData = await arrayBufferFromBlob(audioBlob);\n        const inputPCM = await decodeAudioData(audioData, inputSampleRate);\n        const bitRate = this.bitRate || 64 * 1000; // MP3-specific default bitRate\n\n        // Until direct to MP3 encoder implemented, record as Opus first then convert as a whole.\n        return withWorker(options.workerUrl, (worker) => {\n            const CHUNK_SIZE = 8192;\n            worker.postMessage({\n                type: 'init',\n                sampleRate: inputSampleRate,\n                bitRate\n            });\n\n            // send to worker in chunks\n            let offset = 0;\n            let remain = inputPCM.length;\n            while (remain > 0) {\n                const length = remain > CHUNK_SIZE ? CHUNK_SIZE : remain;\n\n                // slice out a chunk into its own ArrayBuffer\n                const chunk = new Float32Array(length);\n                chunk.set(inputPCM.slice(offset, offset + length), 0);\n                offset += length;\n                remain -= length;\n\n                worker.postMessage({\n                    type: 'data',\n                    data: chunk.buffer,\n                }, [chunk.buffer]);\n            }\n\n            // signal end of data\n            worker.postMessage({\n                type: 'flush',\n            });\n        }).then(blob => {\n            triggerEvent(this, 'converted', { blob });\n            return blob;\n        }).catch(err => {\n            triggerEvent(this, 'error', { error: err });\n            throw err;\n        })\n    }\n\n    async _recordOpus(stream, options) {\n        const bitRate = this.bitRate || (32 * 1000); // Uses 32k as default bitrate for Opus podcast\n\n        // Use optional 'MediaRecorder' field of recording call options to override.\n        const mediaRecorderOptions = Object.assign({}, {\n            mimeType: 'audio/webm; codecs=\"opus\"',\n            audioBitsPerSecond: bitRate,\n        }, options.MediaRecorder);\n\n        // MediaRecorder instance had issues when reused.\n        // So each recording session creates a new instance internally.\n        const recorder = new MediaRecorder(stream, mediaRecorderOptions);\n\n        // Stop event is used to stop recording.\n        this.addEventListener('stop', ({ detail: { reason } }) => {\n            if (!recorder || recorder.state !== 'recording') {\n                return;\n            }\n            recorder.stop()\n        }, { once: true });\n\n        // Time-sliced blobs from MediaRecorders are not guaranteed to honor logical boundaries.\n        // So blobs are merged to form a proper opus packets in webm container is returned when stopped.\n        // Override optional 'timeslice' recording option to change timeslice duration (default 20ms).\n        // Note that resulting audio file's duration field is not set correctly on Chrome.\n        return new Promise((resolve, reject) => {\n            const blobs = [];\n            recorder.ondataavailable = e => {\n                if (typeof e.data !== \"undefined\" && e.data.size > 0) {\n                    blobs.push(e.data);\n                }\n            };\n            recorder.onstop = e => {\n                if (blobs.length > 0) {\n                    resolve(new Blob(blobs, { type: blobs[0].type }))\n                } else {\n                    resolve(null);\n                }\n            };\n            recorder.onerror = e => {\n                reject(e.error);\n            }\n            recorder.start(options.timeslice);\n        })\n    }\n\n    async _recordMP3(stream, options) {\n        const sampleRate = stream.getAudioTracks()[0].getSettings().sampleRate;\n        return withWorker(options.workerUrl, (worker) => {\n            const bitRate = this.bitRate || (64 * 1024); // MP3-specific default bitrate for podcasting\n            worker.postMessage({\n                type: 'init',\n                sampleRate,\n                bitRate\n            });\n\n            this._processStream(stream, (samples) => {\n                worker.postMessage({\n                    type: 'data',\n                    data: samples.buffer,\n                }, [samples.buffer]);\n            })\n\n            this.addEventListener(\"stop\", e => {\n                // signal end of data\n                worker.postMessage({\n                    type: 'flush',\n                });\n            })\n        })\n    }\n\n    async _processStream(stream, processor) {\n        const audioContext = new AudioContext()\n\n        const sourceNode = audioContext.createMediaStreamSource(stream);\n\n        const processorNode = audioContext.createScriptProcessor(0, 1, 1);\n        processorNode.onaudioprocess = (e) => processor(getChannelData(e.inputBuffer, 0))\n\n        sourceNode.connect(processorNode);\n        processorNode.connect(audioContext.destination);\n\n        this.addEventListener(\"stop\", e => {\n            sourceNode.disconnect();\n        })\n    }\n}\n\n/**\n * Reads all of blob data into an ArrayBuffer.\n * \n * @param {Blob} blob \n * \n * @result {ArrayBuffer}\n */\nasync function arrayBufferFromBlob(blob) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsArrayBuffer(blob);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n    });\n}\n\n/**\n * Decode compressed audio data into uncompressed (PCM) audio data.\n * \n * @param {ArrayBuffer} audioData\n * \n * @result {Float32Array}\n */\nasync function decodeAudioData(audioData, sampleRate = 48000) {\n    // OfflineAudioContext is more appropriate here but plain AudioContext\n    // is used to avoid potential outstanding unreleased memory issue.\n    const audioCtx = new AudioContext({ sampleRate });\n    const audioBuffer = await audioCtx.decodeAudioData(audioData);\n    return getChannelData(audioBuffer, 0);\n}\n\nfunction withWorker(workerUrl, workHandler) {\n    // Needs a Web Worker and WebAssembly supporting browser\n    if (!window.Worker || !window.WebAssembly) {\n        throw new Error('Worker and WebAssembly features not available');\n    }\n\n    return new Promise((resolve, reject) => {\n        const worker = new Worker(workerUrl);\n        worker.onmessage = (msg) => {\n            switch (msg.data.type) {\n                case 'ready':\n                    workHandler(worker);\n                    break;\n                case 'done':\n                    worker.terminate();\n                    resolve(msg.data.blob);\n                    break;\n            }\n        };\n        worker.onerror = (err) => {\n            reject(err);\n        };\n    });\n}","import \"regenerator-runtime/runtime\";\nexport * from \"./TalkRecorder\";\nimport { TalkRecorder } from \"./TalkRecorder\";\n\nif (typeof window !== 'undefined') {\n    window.TalkRecorder = TalkRecorder;\n    if ('customElements' in window) {\n        customElements.define(\"talk-recorder\", TalkRecorder);\n    }\n}\n"]}