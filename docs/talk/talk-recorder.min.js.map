{"version":3,"sources":["utils.js","TalkLocalService.js","TalkRemoteService.js","FramePort.js","TalkRecorder.js","recorder.js"],"names":["promiseCallback","promise","cb","then","result","catch","err","triggerEvent","eventTarget","eventName","eventDetail","dispatchEvent","CustomEvent","detail","friendlyFloat","value","oldValue","lastChar","trim","substr","floatValue","parseFloat","getChannelData","audioBuffer","channel","channelData","Float32Array","length","copyFromChannel","slice","arrayBufferFromBlob","blob","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onload","onerror","error","decodeAudioData","audioData","sampleRate","audioCtx","AudioContext","withWorker","workerUrl","workHandler","window","Worker","WebAssembly","Error","worker","URL","host","location","createObjectURL","Blob","onmessage","msg","data","type","terminate","webkitAudioContext","getUserMedia","navigator","mediaDevices","currentScriptURL","document","currentScript","src","baseURI","getFullScriptUrl","relativeUrl","toString","console","log","TalkLocalService","constructor","record","element","options","stream","MediaRecorder","protocol","hostname","Object","assign","timeslice","getUserMediaOptions","audio","video","channelCount","autoGainControl","echoCancellation","noiseSuppression","addEventListener","e","getTracks","forEach","track","stop","once","_recordOpus","_recordMP3","reason","convert","audioBlob","inputSampleRate","inputPCM","bitRate","postMessage","offset","remain","chunk","set","buffer","mediaRecorderOptions","mimeType","audioBitsPerSecond","recorder","state","blobs","ondataavailable","size","push","onstop","start","audioSettings","getAudioTracks","getSettings","_processStream","samples","processor","audioContext","sourceNode","createMediaStreamSource","processorNode","createScriptProcessor","onaudioprocess","inputBuffer","connect","destination","disconnect","TalkRemoteService","createServiceFrame","role","iframe","createElement","name","allow","width","height","style","display","border","iframePort","FramePort","EventTarget","frameOrParent","HTMLIFrameElement","target","contentWindow","origin","parent","referrer","_reqCount","_receivers","_listener","_receiveMessage","close","removeEventListener","transfers","sendRequest","request","_registerRequest","response","isRequest","sendResponse","_registerResponse","sendError","_dispatchResponse","receiver","_reqId","_resId","resId","TalkRecorder","HTMLElement","attributeChangedCallback","newValue","toLowerCase","connectedCallback","ensureInit","apply","disconnectedCallback","adoptedCallback","isSupported","service","_inited","appendChild","parentPort","customElements","define"],"mappings":"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","file":"talk-recorder.min.js","sourceRoot":"../src","sourcesContent":["/**\n * Turns a promise into callback.\n * \n * @param {Promise} promise \n * @param {function} cb \n */\nexport function promiseCallback(promise, cb) {\n    return promise.then(result => cb(null, result)).catch(err => cb(err, result));\n}\n\n/**\n * Helper for dispatching a custom event.\n * Default EventInit values are implicitly used, meaning events cannot be captured nor bubbled.\n * \n * @param {EventTarget} eventTarget \n * @param {string} eventName \n * @param {any} eventDetail \n */\nexport function triggerEvent(eventTarget, eventName, eventDetail = null) {\n    eventTarget.dispatchEvent(new CustomEvent(eventName, { detail: eventDetail }));\n}\n\nexport function friendlyFloat(value, oldValue) {\n    if (typeof value !== 'string') {\n        return oldValue;\n    }\n    const lastChar = value.trim().substr(-1);\n    let floatValue = parseFloat(value);\n    if (lastChar === 'k' || lastChar === 'K') {\n        floatValue *= 1000;\n    }\n    return floatValue;\n}\n\n/**\n * Get 'Transferable' raw audio samples from AudioBuffer.\n * This is a convenience function to pave over lack of ubiquitous copyFromChannel support.\n * \n * @param {AudioBuffer} audioBuffer \n * @param {number} channel \n */\nexport function getChannelData(audioBuffer, channel) {\n    let channelData;\n    if ('copyFromChannel' in audioBuffer) {\n        channelData = new Float32Array(audioBuffer.length);\n        audioBuffer.copyFromChannel(channelData, channel);\n    } else {\n        channelData = audioBuffer.getChannelData(channel).slice();\n    }\n    return channelData;\n}\n\nexport async function arrayBufferFromBlob(blob) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsArrayBuffer(blob);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n    });\n}\n\nexport async function decodeAudioData(audioData, sampleRate = 48000) {\n    // OfflineAudioContext is more appropriate here but plain AudioContext\n    // is used to avoid potential outstanding unreleased memory issue.\n    const audioCtx = new AudioContext({ sampleRate });\n    const audioBuffer = await audioCtx.decodeAudioData(audioData);\n    return getChannelData(audioBuffer, 0);\n}\n\nexport async function withWorker(workerUrl, workHandler) {\n    // Needs a Web Worker and WebAssembly supporting browser\n    if (!window.Worker || !window.WebAssembly) {\n        throw new Error('Worker and WebAssembly features not available');\n    }\n    return new Promise((resolve, reject) => {\n        let worker;\n        if (new URL(workerUrl).host === window.location.host) {\n            worker = new Worker(workerUrl);\n        } else {\n            worker = new Worker(URL.createObjectURL(new Blob([`importScripts(\"${workerUrl}\");`])));\n        }\n        worker.onmessage = (msg) => {\n            switch (msg.data.type) {\n                case 'ready':\n                    workHandler(worker);\n                    break;\n                case 'done':\n                    worker.terminate();\n                    resolve(msg.data.blob);\n                    break;\n            }\n        };\n        worker.onerror = (err) => {\n            reject(err);\n        };\n    });\n}\n","import {\n    arrayBufferFromBlob,\n    decodeAudioData,\n    getChannelData,\n    triggerEvent,\n    withWorker\n} from \"./utils\";\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst getUserMedia = navigator.mediaDevices ? navigator.mediaDevices.getUserMedia : navigator.getUserMedia;\n\n// HACK: Used to determine full worker URL using script tag's src attribute if available.\nconst currentScriptURL = document.currentScript ? new URL(document.currentScript.src, document.baseURI) : null;\nfunction getFullScriptUrl(relativeUrl) {\n    return currentScriptURL ? new URL(relativeUrl, currentScriptURL).toString() : relativeUrl;\n}\nconst workerUrl = getFullScriptUrl(\"./lamemp3/worker.js\");\nconsole.log('workerUrl', workerUrl);\n\nexport class TalkLocalService {\n    constructor() {\n    }\n\n    async record(element, options) {\n        if (element.stream) {\n            throw new Error('already recording');\n        }\n        if (!window.MediaRecorder || !window.Worker || !window.WebAssembly) {\n            throw new Error('Current browser is not supported by talk-recorder');\n        }\n        if (!getUserMedia && !element.host && window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {\n            throw new Error('HTTPS is required for media recording.');\n        }\n\n        options = Object.assign({\n            type: 'opus',\n            timeslice: 20,\n            workerUrl,\n        }, options)\n\n        // Use optional 'getUserMedia' field of recording call options to override.\n        const getUserMediaOptions = Object.assign({}, {\n            audio: true,\n            video: false,\n            channelCount: 1,\n            autoGainControl: true,\n            echoCancellation: true,\n            noiseSuppression: true\n        }, options.getUserMedia);\n\n        // start capturing audio\n        element.stream = await navigator.mediaDevices.getUserMedia(getUserMediaOptions);\n\n        triggerEvent(element, 'record', { stream: element.stream });\n\n        element.addEventListener('stop', e => {\n            element.stream.getTracks().forEach(track => track.stop());\n            element.stream = null;\n        }, { once: true });\n\n        try {\n            let blob;\n            if (options.type === 'opus') {\n                blob = await this._recordOpus(element, element.stream, options);\n            } else if (options.type === 'mp3') {\n                blob = await this._recordMP3(element, element.stream, options);\n            }\n            triggerEvent(element, 'recorded', { blob });\n            return blob;\n        } catch (err) {\n            triggerEvent(element, 'error', { error: err });\n            throw err;\n        }\n    }\n\n    stop(element, reason) {\n        triggerEvent(element, 'stop', { reason });\n    }\n\n    async convert(element, audioBlob, options = {}) {\n        triggerEvent(element, 'convert');\n\n        options = Object.assign({}, {\n            sampleRate: 48000,\n            type: 'mp3',\n            workerUrl,\n        }, options);\n\n        // decode audio samples using 48000 as default input sample rate.\n        const inputSampleRate = options.sampleRate || 48000;\n        const audioData = await arrayBufferFromBlob(audioBlob);\n        const inputPCM = await decodeAudioData(audioData, inputSampleRate);\n        const bitRate = element.bitRate || 64 * 1000; // MP3-specific default bitRate\n\n        // Until direct to MP3 encoder implemented, record as Opus first then convert as a whole.\n        return withWorker(options.workerUrl, (worker) => {\n            const CHUNK_SIZE = 8192;\n            worker.postMessage({\n                type: 'init',\n                sampleRate: inputSampleRate,\n                bitRate\n            });\n\n            // send to worker in chunks\n            let offset = 0;\n            let remain = inputPCM.length;\n            while (remain > 0) {\n                const length = remain > CHUNK_SIZE ? CHUNK_SIZE : remain;\n\n                // slice out a chunk into its own ArrayBuffer\n                const chunk = new Float32Array(length);\n                chunk.set(inputPCM.slice(offset, offset + length), 0);\n                offset += length;\n                remain -= length;\n\n                worker.postMessage({\n                    type: 'data',\n                    data: chunk.buffer,\n                }, [chunk.buffer]);\n            }\n\n            // signal end of data\n            worker.postMessage({\n                type: 'flush',\n            });\n        }).then(blob => {\n            triggerEvent(element, 'converted', { blob });\n            return blob;\n        }).catch(err => {\n            triggerEvent(element, 'error', { error: err });\n            throw err;\n        })\n    }\n\n    async _recordOpus(element, stream, options) {\n        const bitRate = element.bitRate || (32 * 1000); // Uses 32k as default bitrate for Opus podcast\n\n        // Use optional 'MediaRecorder' field of recording call options to override.\n        const mediaRecorderOptions = Object.assign({}, {\n            mimeType: 'audio/webm; codecs=\"opus\"',\n            audioBitsPerSecond: bitRate,\n        }, options.MediaRecorder);\n\n        // MediaRecorder instance had issues when reused.\n        // So each recording session creates a new instance internally.\n        const recorder = new MediaRecorder(stream, mediaRecorderOptions);\n\n        // Stop event is used to stop recording.\n        element.addEventListener('stop', ({ detail: { reason } }) => {\n            if (!recorder || recorder.state !== 'recording') {\n                return;\n            }\n            recorder.stop()\n        }, { once: true });\n\n        // Time-sliced blobs from MediaRecorders are not guaranteed to honor logical boundaries.\n        // So blobs are merged to form a proper opus packets in webm container is returned when stopped.\n        // Override optional 'timeslice' recording option to change timeslice duration (default 20ms).\n        // Note that resulting audio file's duration field is not set correctly on Chrome.\n        return new Promise((resolve, reject) => {\n            const blobs = [];\n            recorder.ondataavailable = e => {\n                if (typeof e.data !== \"undefined\" && e.data.size > 0) {\n                    blobs.push(e.data);\n                }\n            };\n            recorder.onstop = e => {\n                if (blobs.length > 0) {\n                    resolve(new Blob(blobs, { type: blobs[0].type }))\n                } else {\n                    resolve(null);\n                }\n            };\n            recorder.onerror = e => {\n                reject(e.error);\n            }\n            recorder.start(options.timeslice);\n        })\n    }\n\n    async _recordMP3(element, stream, options) {\n        const audioSettings = stream.getAudioTracks()[0].getSettings();\n        const sampleRate = audioSettings.sampleRate || 48000;\n        return withWorker(options.workerUrl, (worker) => {\n            const bitRate = element.bitRate || (64 * 1024); // MP3-specific default bitrate for podcasting\n            worker.postMessage({\n                type: 'init',\n                sampleRate,\n                bitRate\n            });\n\n            this._processStream(element, stream, (samples) => {\n                worker.postMessage({\n                    type: 'data',\n                    data: samples.buffer,\n                }, [samples.buffer]);\n            })\n\n            element.addEventListener(\"stop\", e => {\n                // signal end of data\n                worker.postMessage({\n                    type: 'flush',\n                });\n            })\n        })\n    }\n\n    async _processStream(element, stream, processor) {\n        const audioContext = new AudioContext()\n\n        const sourceNode = audioContext.createMediaStreamSource(stream);\n\n        const processorNode = audioContext.createScriptProcessor(0, 1, 1);\n        processorNode.onaudioprocess = (e) => processor(getChannelData(e.inputBuffer, 0))\n\n        sourceNode.connect(processorNode);\n        processorNode.connect(audioContext.destination);\n\n        element.addEventListener(\"stop\", e => {\n            sourceNode.disconnect();\n        })\n    }\n}\n","import { triggerEvent } from \"./utils\";\n\nexport class TalkRemoteService {\n    constructor() {\n    }\n\n    createServiceFrame(element) {\n        const { host, role } = element;\n        const iframe = document.createElement('iframe');\n        iframe.src = host;\n        iframe.name = \"talk-service\";\n        iframe.allow = \"microphone; autoplay\";\n        if (role === 'framer') {\n            iframe.width = 0;\n            iframe.height = 0;\n            iframe.style.display = 'none';\n        } else {\n            iframe.width = 500;\n            iframe.height = 500;\n            iframe.style.border = 'none';\n        }\n        return iframe;\n    }\n\n    async record(element, options) {\n        if (!element.iframePort) {\n            throw new Error('service frame to host failed to open');\n        }\n        return new Promise((resolve, reject) => {\n            element.iframePort.addEventListener('recorded', e => {\n                const msg = e.detail;\n                triggerEvent(element, msg.type, msg)\n                resolve(msg.blob);\n            }, { once: true });\n            element.iframePort.addEventListener('error', e => {\n                const msg = e.detail;\n                triggerEvent(element, msg.type, msg)\n                reject(msg.error)\n            }, { once: true });\n            element.iframePort.postMessage({\n                type: 'record',\n                options,\n            })\n            triggerEvent(element, 'record', {});\n        })\n    }\n\n    stop(element, reason) {\n        triggerEvent(element, 'stop', { reason });\n\n        if (element.iframePort) {\n            element.iframePort.postMessage({ type: 'stop' });\n        }\n    }\n\n    async convert(element, audioBlob, options = {}) {\n        if (!element.iframePort) {\n            throw new Error('service frame to host failed to open');\n        }\n\n        return new Promise((resolve, reject) => {\n            element.iframePort.addEventListener('converted', e => {\n                const msg = e.detail;\n                triggerEvent(element, msg.type, msg)\n                resolve(msg.blob);\n            }, { once: true });\n            element.iframePort.addEventListener('error', e => {\n                const msg = e.detail;\n                triggerEvent(element, msg.type, msg)\n                reject(msg.error)\n            }, { once: true });\n            element.iframePort.postMessage({\n                type: 'convert',\n                blob: audioBlob,\n                options,\n            })\n            triggerEvent(element, 'convert', {});\n        })\n    }\n}\n","/**\n * Create port to an iframe element:\n * \n *      const iframePort = new FramePort(iframeEl);\n * \n * Create port to parent window:\n * \n *      const parentPort = new FramePort(window.parent);\n * \n * Post a message:\n * \n *      port.postMessage(msg, [transferables]);\n * \n * Wait for a specific message type:\n * \n *      port.addEventListener('recorded', msg => console.log('recorded blob', msg.blob));\n * \n * Send a request and wait for response:\n * \n *      const response = await port.sendRequest(request, [transferables]);\n * \n * Send a message in response to a request:\n * \n *      if (port.isRequest(msg)) port.sendResponse(msg, response);\n * \n * Send error in response to a request:\n * \n *      if (port.isRequest(msg) && error) port.sendError(msg, error);\n * \n */\nexport class FramePort extends EventTarget {\n\n    constructor(frameOrParent) {\n        super();\n\n        if (!frameOrParent) throw new Error('null FramePort constructor argument');\n        if (frameOrParent instanceof HTMLIFrameElement) {\n            if (!frameOrParent.src) throw new Error('null iframe.src');\n            this.target = frameOrParent.contentWindow;\n            this.origin = new URL(frameOrParent.src).origin;\n        } else {\n            if (frameOrParent !== parent) throw new Error(\"wrong parent\");\n            if (frameOrParent === window) throw new Error(\"not framed\");\n            this.target = frameOrParent;\n            this.origin = new URL(document.referrer).origin;\n        }\n\n        this._reqCount = 0;\n        this._receivers = {};\n\n        this._listener = e => e.origin === this.origin && this._receiveMessage(e);\n        window.addEventListener('message', this._listener);\n    }\n\n    close() {\n        window.removeEventListener(\"message\", this._listener);\n        this.target = null;\n        this._receivers = {};\n        this._listener = null;\n    }\n\n    postMessage(msg, transfers) {\n        if (!msg) throw new Error('null msg');\n        this.target.postMessage(msg, this.origin, transfers);\n    }\n\n    sendRequest(request, transfers) {\n        return new Promise((resolve, reject) => {\n            this._registerRequest(request, (response) => response.type !== 'error' ? resolve(response) : reject(response.error));\n            this.postMessage(request, transfers);\n        });\n    }\n\n    isRequest(msg) {\n        return '_reqId' in msg;\n    }\n\n    sendResponse(request, response, transfers) {\n        this._registerResponse(request, response);\n        this.postMessage(response, transfers);\n    }\n\n    sendError(request, error) {\n        this.sendResponse(request, { type: 'error', error });\n    }\n\n    _receiveMessage(e) {\n        const msg = e.data;\n        if (!this._dispatchResponse(msg)) {\n            this.dispatchEvent(new CustomEvent(msg.type, { detail: msg }));\n        }\n    }\n\n    _registerRequest(msg, receiver) {\n        msg._reqId = ++this._reqCount;\n        this._receivers[msg._reqId] = receiver;\n    }\n\n    _registerResponse(request, response) {\n        response._resId = request._reqId;\n    }\n\n    _dispatchResponse(msg) {\n        const resId = msg._resId;\n        if (!resId || !this._receivers[resId]) {\n            return false;\n        }\n        this._receivers[resId](msg);\n        delete this._receivers[resId];\n        return true;\n    }\n}\n","import { TalkLocalService } from \"./TalkLocalService\";\nimport { TalkRemoteService } from \"./TalkRemoteService\"\nimport { FramePort } from \"./FramePort\";\nimport { friendlyFloat } from \"./utils\";\n\nexport class TalkRecorder extends HTMLElement {\n    // Lowercased names of modifiable attributes to receive attributeChangedCallback on.\n    static observedAttributes = [\"bitrate\", \"host\", \"role\"];\n\n    constructor() {\n        super();\n    }\n\n    // Callback used to notify when an attribute in `observedAttributes` list changes value.\n    // Also called before connectedCallback with each attribute's initial value.\n    // Attributes covered include custom as well as built-in attributes, like style.\n    // NOTE: attribute name will be in lowercase as specfied in the HTML spec.\n    attributeChangedCallback(name, oldValue, newValue) {\n        switch (name) {\n            case 'bitrate':\n                this.bitRate = friendlyFloat(newValue, oldValue);\n                break;\n            case 'host':\n                this.host = newValue;\n                break;\n            case 'role':\n                console.log('role', { oldValue, newValue });\n                if (typeof newValue === 'string') {\n                    this.role = newValue.trim().toLowerCase();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Callback to notify custom element has been inserted into document.\n    connectedCallback() {\n        ensureInit.apply(this);\n    }\n\n    // Callback to notify custom element has been removed from document.\n    disconnectedCallback() {\n    }\n\n    // Callback to notify custom element's parentNode changes\n    adoptedCallback() {\n    }\n\n    isSupported() {\n        return (\n            navigator.mediaDevices && navigator.mediaDevices.getUserMedia &&\n            window.MediaRecorder &&\n            window.Worker &&\n            window.WebAssembly\n        );\n    }\n\n    async record(options = {}) {\n        ensureInit.apply(this);\n\n        options = Object.assign({}, {\n            type: 'opus',\n        }, options);\n\n        if (options.type !== 'opus' && options.type !== 'mp3') {\n            throw new Error('unknown recording type');\n        }\n\n        return this.service.record(this, options);\n    }\n\n    async stop(reason = 'finish') {\n        if (this.service) {\n            return this.service.stop(this, reason);\n        }\n    }\n\n    async convert(audioBlob, options = {}) {\n        ensureInit.apply(this);\n        return this.service.convert(this, audioBlob, options);\n    }\n}\n\n// On-demand initialization allows class to be used without inserted.\nfunction ensureInit() {\n    if (this._inited) {\n        return;\n    }\n    this._inited = true;\n    if (this.host) {\n        this.service = new TalkRemoteService();\n        this.iframe = this.service.createServiceFrame(this);\n        this.appendChild(this.iframe);\n        this.iframePort = new FramePort(this.iframe);\n    } else {\n        this.service = new TalkLocalService();\n\n        if (this.role === 'framed' && parent !== window) {\n            this.parentPort = new FramePort(parent);\n            this.parentPort.addEventListener('record', e => {\n                const msg = e.detail;\n                this.record(msg.options)\n            });\n            this.parentPort.addEventListener('stop', e => {\n                const msg = e.detail;\n                this.stop(msg.reason);\n            });\n            this.parentPort.addEventListener('convert', e => {\n                const msg = e.detail;\n                this.convert(msg.blob, msg.options);\n            });\n            this.addEventListener('recorded', e => {\n                const { blob } = e.detail;\n                this.parentPort.postMessage({ type: 'recorded', blob })\n            })\n            this.addEventListener('converted', e => {\n                const { blob } = e.detail;\n                this.parentPort.postMessage({ type: 'converted', blob });\n            })\n        }\n    }\n}\n","export * from \"./TalkRecorder\";\nimport { TalkRecorder } from \"./TalkRecorder\";\n\nif (typeof window !== 'undefined') {\n    window.TalkRecorder = TalkRecorder;\n    if ('customElements' in window) {\n        customElements.define(\"talk-recorder\", TalkRecorder);\n    }\n}\n"]}